{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","alt","MemeGenerator","state","topTxt","bottomTxt","memeImg","memeRandom","handleChange","event","setState","target","name","value","handleSubmit","e","preventDefault","randomNum","Math","floor","random","length","randomImgg","url","fetch","then","res","json","response","data","memes","console","log","this","onSubmit","type","placeholder","onChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAUeA,EAVA,WACb,OACE,iCACE,sBAAKC,UAAU,YAAf,UACE,qBAAKC,IAAI,+BAA+BC,IAAI,QAC5C,sD,mCC2DOC,E,4MA7DbC,MAAQ,CACNC,OAAQ,GACRC,UAAW,GACXC,QAAS,sCACTC,WAAY,I,EAGdC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAUpDC,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKjB,MAAMI,WAAWc,QAC7DC,EAAa,EAAKnB,MAAMI,WAAWU,GAAWM,IACpD,EAAKb,SAAS,CAAEJ,QAASgB,K,uDAX3B,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKlB,SAAS,CAAEH,WAAYqB,EAASC,KAAKC,a,oBAUhD,WAEE,OADAC,QAAQC,IAAIC,KAAK9B,MAAMI,YAErB,gCACE,uBAAMR,UAAU,YAAYmC,SAAUD,KAAKnB,aAA3C,UACE,uBACEqB,KAAK,OACLvB,KAAK,SACLwB,YAAY,WACZC,SAAUJ,KAAKzB,aACfK,MAAOoB,KAAK9B,MAAMC,SAGpB,uBACE+B,KAAK,OACLvB,KAAK,YACLwB,YAAY,cACZC,SAAUJ,KAAKzB,aACfK,MAAOoB,KAAK9B,MAAME,YAEpB,8BACE,wBAAQ8B,KAAK,SAASpC,UAAU,MAAhC,2BAKJ,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,MAAd,SAAqBkC,KAAK9B,MAAMC,SAChC,oBAAIL,UAAU,SAAd,SAAwBkC,KAAK9B,MAAME,YACnC,qBAAKL,IAAKiC,KAAK9B,MAAMG,QAASL,IAAI,e,GAvDhBqC,aCUbC,MATf,WACE,OACE,sBAAKxC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCKSyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a1775e20.chunk.js","sourcesContent":["const Header = () => {\r\n  return (\r\n    <header>\r\n      <div className='container'>\r\n        <img src='https://i.gifer.com/45RU.gif' alt='lol' />\r\n        <h2>Meme Generator</h2>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass MemeGenerator extends Component {\r\n  state = {\r\n    topTxt: '',\r\n    bottomTxt: '',\r\n    memeImg: 'https://i.redd.it/iy0mnp8ofcu51.png',\r\n    memeRandom: [],\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch('https://api.imgflip.com/get_memes')\r\n      .then((res) => res.json())\r\n      .then((response) => {\r\n        this.setState({ memeRandom: response.data.memes });\r\n      });\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const randomNum = Math.floor(Math.random() * this.state.memeRandom.length);\r\n    const randomImgg = this.state.memeRandom[randomNum].url;\r\n    this.setState({ memeImg: randomImgg });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.memeRandom);\r\n    return (\r\n      <div>\r\n        <form className='meme-form' onSubmit={this.handleSubmit}>\r\n          <input\r\n            type='text'\r\n            name='topTxt'\r\n            placeholder='Top text'\r\n            onChange={this.handleChange}\r\n            value={this.state.topTxt}\r\n          />\r\n\r\n          <input\r\n            type='text'\r\n            name='bottomTxt'\r\n            placeholder='Bottom text'\r\n            onChange={this.handleChange}\r\n            value={this.state.bottomTxt}\r\n          />\r\n          <div>\r\n            <button type='submit' className='btn'>\r\n              Generate\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div className='meme'>\r\n          <h2 className='top'>{this.state.topTxt}</h2>\r\n          <h2 className='bottom'>{this.state.bottomTxt}</h2>\r\n          <img src={this.state.memeImg} alt='' />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import './App.css';\nimport Header from './Header';\nimport MemeGenerator from './MemeGenerator';\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}